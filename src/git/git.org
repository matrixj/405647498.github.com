# -*- coding:utf-8 -*-
#+LANGUAGE:  zh
#+TITLE:     git拾遗
#+AUTHOR:    孤峰独秀
#+EMAIL:     jixiuf@gmail.com
#+DATE:     2011-08-09 二
#+DESCRIPTION:git拾遗
#+KEYWORDS: git scm 
#+OPTIONS:   H:2 num:nil toc:t \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil 
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+FILETAGS: @Git 
** git rm 
#+begin_src sh
git rm --cache filename
#+end_src
从库中删除filename ,即不再对它进行管理， 但本地会留一份.

** git submodule 子模块的删除
  需要3步
  + 修改 .gitmodules 文件，删除相应的条目
    #+begin_src sh
    [submodule "site-lisp/anything-config"]
	path = site-lisp/anything-config
	url = http://repo.or.cz/r/anything-config.git
    #+end_src
  + 修改.git/config 文件，删除相应的条目
    #+begin_src sh
[submodule "site-lisp/anything-config"]
	url = http://repo.or.cz/r/anything-config.git
    #+end_src
  + 运行git rm --cache 子模块所在路径,如:
    #+begin_src sh
    git rm --cache site-lisp/anything-config 
    #+end_src
    不能写成
    #+begin_src sh
    git rm --cache site-lisp/anything-config/ 
    #+end_src
    
** 要查看某个文件的以前的版本,使用 git show 命令
#+begin_src sh
git show 0b26bbe907c929ed88f6ba3dfeaaa9a2953b1c56:a.txt

git cat-file blob 0b26bbe907c929ed88f6ba3dfeaaa9a2953b1c56:a.txt
#+end_src
   
** 可以checkout 某个文件的以前的版本
   #+begin_src sh
 git checkout 0b26bbe907c929ed88f6ba3dfeaaa9a2953b1c56 a.txt
   #+end_src

 

** git ls-tree 与git show 
 不仅仅一次提交后会产生一个sha1 的字符串,其实每一个提交对应的文件也后有一个状态,比后我想杳看
0b26bbe907c929ed88f6ba3dfeaaa9a2953b1c56这次提交后对应的文件所对应的sha1值
可以使用git ls-tree命令
比如
#+begin_src sh
root # git ls-tree f7619cab6a71505b23e172f3146adfa750bab71e
100644 blob 83c4ba189edcc364ca18b0b7d2cd81655d97adc5    a
100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    d
#+end_src
比如此次提交后文件a与d 分别对应的sha1 值列了出来,然后就可以直接用这个值去查看相应的文件
#+begin_src sh
git show 83c4ba189edcc364ca18b0b7d2cd81655d97adc5 后查看文件a的内容
#+end_src
#+begin_src  sh
这与 
git show f7619cab6a71505b23e172f3146adfa750bab71e:a     的效果相同 
#+end_src

* git svn 
  git svn clone svn-url == git clone git-url
  git svn  fetch == git pull
  git svn  rebase == git rebase
  git svn dcommit == git push
  在运行git svn dcommit 时，必须保证本地没有已修改但未commit 的文件，
  解决方法是
  git stash
  git svn dcommit
  git stash pop
  一般做法是
  git stash
  git svn fetch
  git svn rebase
  git svn dcommit
  git stash pop
** svn 的远程分支叫 remotes/git-svn 
如果在当前分支已经有数次提交 ，但是发现有一个bug需要修复，修复后马上提交 ，而
  当前分支里的commit 并不想push到远程svn上，做法是
  git co remotes/git-svn -b tmp
  然后修复bug 提交 即可，当然其中可以使用stash 来暂时保存未commit 的修改
** git reset version
   合并commit 。想将最后几次commit 合并成一个commit 
   可以用 git reset version
   git reset 回退到某一版本后，
   工作区的文件依然保存着未回退前的状态 ，所以只需再提交一次
   即将最后几次的commit 合并到一次提交 
* 找回丢失的提交
  在使用Git的过程中，有时可能会有一些误操作
  比如：执行checkout -f 或 reset -hard 或 branch -d删除一个分支
  结果造成本地（远程）的分支或某些commit丢失
  这时，我们可以通过reflog来进行恢复，前提是丢失的分支或commit信息没有被
  git gc清除
  一般情况下，gc对那些无用的object会保留很长时间后才清除的
  reflog是git提供的一个内部工具，用于记录对git仓库进行的各种操作
  可以使用git reflog show或git log -g命令来看到所有的操作日志
  恢复的过程很简单：
1. 通过git log -g命令来找到我们需要恢复的信息对应的commitid，可以通过提
   交的时间和日期来辨别
2. 通过git branch recover_branch commitid 来建立一个新的分支
  这样，我们就把丢失的东西给恢复到了recover_branch分支上了
