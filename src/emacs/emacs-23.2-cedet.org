# -*- coding:utf-8 -*-
#+TITLE:     emacs-23.2安装官网cedet
#+AUTHOR:    孤峰独秀
#+EMAIL:     jixiuf@gmail.com
#+DATE:      2011-06-08 星期三
#+DESCRIPTION: emacs cedet 
#+KEYWORDS: emacs cedet 
#+LANGUAGE:  zh
#+FILETAGS: @Emacs @Linux @Windows

关于emacs-23.2安装官方提供的cedet 的方法
对于linux 来说来cedet目录下执行make 一般就可以了.
但对于windows来说,因为没有make等一系列的命令,这招就不管用了,
官方的安装指南上说windows上可以
#+begin_src sh
;;     emacs -Q -l cedet-build.el -f cedet-build
#+end_src
运行这条命令来编译cedet-1.0
我要说的重点不在这
重点是
在配置文件中运行这条命令的时候
#+begin_src emacs-lisp
(load-file "~/.emacs.d/site-lisp/cedet-1.0/common/cedet.el")
#+end_src
报
     (error "CEDET Version 1.0 already loaded.")
 这样的错误的解决办法.
  因为 emacs-23.2内置了一个cedet.导致加载失败.
  不过Emacs内置的CEDET和CEDET的官网发布的是不一样的, 我觉得内置的
  可能稳定些, 但是最新的功能可能没有, 所以我还是选择了CEDET官方的
  版本, 具体做法就是把CEDET官方版本下载下来后, 然后把它的路径加到
  load-path的最前面, 这样就可以覆盖Emacs内置的了.
  至于加载路径的方法,你可以一个个将cedet目录下的所有目录
  通过这种方式一个个手动加到load-path中
#+begin_src emacs-lisp
(add-to-list 'load-path  "cedet/..");
#+end_src  

不过我在网上找到一编文章
http://emacser.com/emacs-23-2-release.htm
这位仁兄的配置文件在http://dea.googlecode.com

我从里面找到了它的解决方法:
#+begin_src  emacs-lisp
 (defvar cedet-path "/tmp/cedet-1.0/" "Path of `cedet'")  
 (my-add-subdirs-to-load-path cedet-path)
#+end_src
 基本内容就这两句,但问题是 my-add-subdirs-to-load-path
 函数在何处定义却费了一番手脚,今把它摘录出来仅供参考
#+begin_src emacs-lisp
 ;; -*- Emacs-Lisp -*-

(defun my-add-subdirs-to-load-path (dir)
  "把DIR的所有子目录都加到`load-path'里面"
  (interactive)
  (let ((default-directory (concat dir "/")))
    (add-to-list 'load-path dir)
    (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
        (normal-top-level-add-subdirs-to-load-path))))

;; Fix bug of `normal-top-level-add-subdirs-to-load-path'
;; which can not add directory which name end with ".elc?"
;; copy from emacs23 startup.el and modify it
(defun normal-top-level-add-subdirs-to-load-path ()
  "Add all subdirectories of current directory to `load-path'.
More precisely, this uses only the subdirectories whose names
start with letters or digits; it excludes any subdirectory named `RCS'
or `CVS', and any subdirectory that contains a file named `.nosearch'."
  (let (dirs
        attrs
        (pending (list default-directory)))
    ;; This loop does a breadth-first tree walk on DIR's subtree,
    ;; putting each subdir into DIRS as its contents are examined.
    (while pending
      (push (pop pending) dirs)
      (let* ((this-dir (car dirs))
             (contents (directory-files this-dir))
             (default-directory this-dir)
             (canonicalized (if (fboundp 'untranslated-canonical-name)
                                (untranslated-canonical-name this-dir))))
        ;; The Windows version doesn't report meaningful inode
        ;; numbers, so use the canonicalized absolute file name of the
        ;; directory instead.
        (setq attrs (or canonicalized
                        (nthcdr 10 (file-attributes this-dir))))
        (unless (member attrs normal-top-level-add-subdirs-inode-list)
          (push attrs normal-top-level-add-subdirs-inode-list)
          (dolist (file contents)
            ;; The lower-case variants of RCS and CVS are for DOS/Windows.
            (unless (member file '("." ".." "RCS" "CVS" "rcs" "cvs"))
              (when (and (string-match "\\`[[:alnum:]]" file)
                         ;; Avoid doing a `stat' when it isn't necessary
                         ;; because that can cause trouble when an NFS server
                         ;; is down.
                         (file-directory-p file))
                (let ((expanded (expand-file-name file)))
                  (unless (file-exists-p (expand-file-name ".nosearch"
                                                           expanded))
                    (setq pending (nconc pending (list expanded)))))))))))
    (if (equal window-system 'w32)
        (setq load-path (append (nreverse dirs) load-path))
      (normal-top-level-add-to-load-path (cdr (nreverse dirs))))))
#+end_src
 
